import telebot
import requests
import random
import sqlite3
from telebot import types

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = ""
# –¢–æ–∫–µ–Ω –¥–ª—è API –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞
KP_TOKEN = ""

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect('movies.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
cursor.execute('''
CREATE TABLE IF NOT EXISTS user_preferences (
    user_id INTEGER,
    movie_id INTEGER,
    liked INTEGER,
    PRIMARY KEY (user_id, movie_id)
    )
''')
conn.commit()

# –°–ø–∏—Å–æ–∫ –∂–∞–Ω—Ä–æ–≤
genres = [
    "–∫–æ–º–µ–¥–∏—è",
    "–¥—Ä–∞–º–∞",
    "–±–æ–µ–≤–∏–∫",
    "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞",
    "—É–∂–∞—Å—ã",
    "—Ç—Ä–∏–ª–ª–µ—Ä",
    "–º–µ–ª–æ–¥—Ä–∞–º–∞",
    "–¥–µ—Ç–µ–∫—Ç–∏–≤",
    "–º—É–ª—å—Ç—Ñ–∏–ª—å–º",
    "–∞–Ω–∏–º–µ",
]

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–∏–ø–∞ –∫–∞—Ä—Ç–∏–Ω—ã –Ω–∞ —Ä—É—Å—Å–∫–∏–π
type_translation = {
    "movie": "—Ñ–∏–ª—å–º",
    "tv-series": "—Å–µ—Ä–∏–∞–ª",
    "cartoon": "–º—É–ª—å—Ç—Ñ–∏–ª—å–º",
    "anime": "–∞–Ω–∏–º–µ",
    "animated-series": "–∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–µ—Ä–∏–∞–ª",
    "tv-show": "—Ç–µ–ª–µ—à–æ—É",
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∞–∫—Ç–µ—Ä–∞, —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏ —Ç.–¥.)
USER_STATES = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
def create_back_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    back_button = types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    markup.add(back_button)
    return markup

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def show_main_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    button_genre = types.KeyboardButton("üé≠ –ñ–∞–Ω—Ä")
    button_actor = types.KeyboardButton("üé¨ –ê–∫—Ç–µ—Ä")
    button_rating = types.KeyboardButton("‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥")  
    button_country = types.KeyboardButton("üåç –°—Ç—Ä–∞–Ω–∞")  
    button_year = types.KeyboardButton("üìÖ –ì–æ–¥")
    button_favorites = types.KeyboardButton("‚ù§Ô∏è –ü–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è")
    markup.add(button_genre, button_actor, button_rating, button_country, button_year, button_favorites)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏ –∫—Ä–∏—Ç–µ—Ä–∏–π –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–∞:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=["start"])
def send_welcome(message):
    show_main_menu(message.chat.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@bot.message_handler(func=lambda message: message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
def handle_back(message):
    show_main_menu(message.chat.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üé≠ –ñ–∞–Ω—Ä"
@bot.message_handler(func=lambda message: message.text == "üé≠ –ñ–∞–Ω—Ä")
def choose_genre(message):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∂–∞–Ω—Ä–æ–≤ –∏ –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = [types.KeyboardButton(genre.capitalize()) for genre in genres]
    markup.add(*buttons)
    markup.add(types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–∞
@bot.message_handler(func=lambda message: message.text.lower() in genres)
def handle_genre(message):
    chat_id = message.chat.id
    genre = message.text.lower()
    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∂–∞–Ω—Ä—É
    url = f"https://api.kinopoisk.dev/v1.3/movie?field=genres.name&search={genre}&limit=50&token={KP_TOKEN}"
    response = requests.get(url)
    data = response.json()

    if data.get("docs"):
        # –ï—Å–ª–∏ —Ñ–∏–ª—å–º—ã –Ω–∞–π–¥–µ–Ω—ã, –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommend_movie(chat_id, data)
    else:
        # –ï—Å–ª–∏ —Ñ–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(chat_id, f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –∂–∞–Ω—Ä—É '{genre}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=create_back_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üé¨ –ê–∫—Ç–µ—Ä"
@bot.message_handler(func=lambda message: message.text == "üé¨ –ê–∫—Ç–µ—Ä")
def ask_actor(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –∞–∫—Ç–µ—Ä–∞:", reply_markup=create_back_keyboard())
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∞–∫—Ç–µ—Ä–∞
    USER_STATES[message.chat.id] = "waiting_actor"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∞–∫—Ç–µ—Ä–∞
@bot.message_handler(func=lambda message: USER_STATES.get(message.chat.id) == "waiting_actor")
def handle_actor(message):
    chat_id = message.chat.id
    actor = message.text
    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞ –ø–æ –∞–∫—Ç–µ—Ä—É
    url = f"https://api.kinopoisk.dev/v1.3/movie?field=persons.name&search={actor}&limit=50&token={KP_TOKEN}"
    response = requests.get(url)
    data = response.json()

    if data.get("docs"):
        # –ï—Å–ª–∏ —Ñ–∏–ª—å–º—ã –Ω–∞–π–¥–µ–Ω—ã, –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommend_movie(chat_id, data)
    else:
        # –ï—Å–ª–∏ —Ñ–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(chat_id, f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ñ–∏–ª—å–º—ã —Å –∞–∫—Ç–µ—Ä–æ–º '{actor}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=create_back_keyboard())
    # –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∞–∫—Ç–µ—Ä–∞
    USER_STATES.pop(chat_id, None)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥"
@bot.message_handler(func=lambda message: message.text == "‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥")  
def ask_rating(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 7.5):", reply_markup=create_back_keyboard())
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
    USER_STATES[message.chat.id] = "waiting_rating"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
@bot.message_handler(func=lambda message: USER_STATES.get(message.chat.id) == "waiting_rating")
def handle_rating(message):
    chat_id = message.chat.id
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —á–∏—Å–ª–æ
        min_rating = float(message.text)
    except ValueError:
        # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ, —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 7.5).", reply_markup=create_back_keyboard())
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
    url = f"https://api.kinopoisk.dev/v1.3/movie?field=rating.kp&search={min_rating}&limit=50&token={KP_TOKEN}"
    response = requests.get(url)
    data = response.json()

    if data.get("docs"):
        # –ï—Å–ª–∏ —Ñ–∏–ª—å–º—ã –Ω–∞–π–¥–µ–Ω—ã, –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommend_movie(chat_id, data)
    else:
        # –ï—Å–ª–∏ —Ñ–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(chat_id, f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ñ–∏–ª—å–º—ã —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –≤—ã—à–µ {min_rating} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=create_back_keyboard())
    # –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
    USER_STATES.pop(chat_id, None)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üåç –°—Ç—Ä–∞–Ω–∞"
@bot.message_handler(func=lambda message: message.text == "üåç –°—Ç—Ä–∞–Ω–∞")  
def ask_country(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –°–®–ê):", reply_markup=create_back_keyboard())
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã
    USER_STATES[message.chat.id] = "waiting_country"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã
@bot.message_handler(func=lambda message: USER_STATES.get(message.chat.id) == "waiting_country")
def handle_country(message):
    chat_id = message.chat.id
    country = message.text.strip()
    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–µ
    url = f"https://api.kinopoisk.dev/v1.3/movie?field=countries.name&search={country}&limit=50&token={KP_TOKEN}"
    response = requests.get(url)
    data = response.json()

    if data.get("docs"):
        # –ï—Å–ª–∏ —Ñ–∏–ª—å–º—ã –Ω–∞–π–¥–µ–Ω—ã, –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommend_movie(chat_id, data)
    else:
        # –ï—Å–ª–∏ —Ñ–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(chat_id, f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ñ–∏–ª—å–º—ã –∏–∑ —Å—Ç—Ä–∞–Ω—ã '{country}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=create_back_keyboard())
    # –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã
    USER_STATES.pop(chat_id, None)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìÖ –ì–æ–¥"
@bot.message_handler(func=lambda message: message.text == "üìÖ –ì–æ–¥")
def ask_year(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ —Ñ–∏–ª—å–º–∞:", reply_markup=create_back_keyboard())
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≥–æ–¥–∞
    USER_STATES[message.chat.id] = "waiting_year"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≥–æ–¥–∞
@bot.message_handler(func=lambda message: USER_STATES.get(message.chat.id) == "waiting_year")
def handle_year(message):
    chat_id = message.chat.id
    year = message.text
    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞ –ø–æ –≥–æ–¥—É
    url = f"https://api.kinopoisk.dev/v1.3/movie?field=year&search={year}&limit=50&token={KP_TOKEN}"
    response = requests.get(url)
    data = response.json()

    if data.get("docs"):
        # –ï—Å–ª–∏ —Ñ–∏–ª—å–º—ã –Ω–∞–π–¥–µ–Ω—ã, –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommend_movie(chat_id, data)
    else:
        # –ï—Å–ª–∏ —Ñ–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(chat_id, f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ñ–∏–ª—å–º—ã {year} –≥–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=create_back_keyboard())
    # –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≥–æ–¥–∞
    USER_STATES.pop(chat_id, None)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚ù§Ô∏è –ü–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è"
@bot.message_handler(func=lambda message: message.text == "‚ù§Ô∏è –ü–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è")
def show_favorites(message):
    user_id = message.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è —Ñ–∏–ª—å–º–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT movie_id FROM user_preferences WHERE user_id = ? AND liked = 1", (user_id,))
    favorite_movies = cursor.fetchall()

    if favorite_movies:
        response_text = "–í–∞—à–∏ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è —Ñ–∏–ª—å–º—ã:\n\n"
        for movie in favorite_movies:
            movie_id = movie[0]
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ –ø–æ –µ–≥–æ ID
            url = f"https://api.kinopoisk.dev/v1.3/movie/{movie_id}?token={KP_TOKEN}"
            response = requests.get(url)
            movie_data = response.json()

            if movie_data:
                name = movie_data.get("name", "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                year = movie_data.get("year", "–ì–æ–¥ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
                response_text += f"{name} ({year})\n"
            else:
                response_text += f"–§–∏–ª—å–º —Å ID {movie_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
        bot.send_message(message.chat.id, response_text, reply_markup=create_back_keyboard())
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è —Ñ–∏–ª—å–º–æ–≤.", reply_markup=create_back_keyboard())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ñ–∏–ª—å–º–∞
def recommend_movie(chat_id, data):
    user_id = chat_id
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ–ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è —Ñ–∏–ª—å–º–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT movie_id FROM user_preferences WHERE user_id = ? AND liked = 0", (user_id,))
    disliked_movies = [row[0] for row in cursor.fetchall()]

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ñ–∏–ª—å–º—ã, –∏—Å–∫–ª—é—á–∞—è —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Ç–º–µ—Ç–∏–ª –∫–∞–∫ –Ω–µ–ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è
    filtered_movies = [movie for movie in data["docs"] if movie.get("id") not in disliked_movies]

    if not filtered_movies:
        bot.send_message(chat_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–∏–ª—å–º–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=create_back_keyboard())
        return

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º –∏–∑ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    random_movie = random.choice(filtered_movies)
    movie_id = random_movie.get("id")
    name = random_movie.get("name", "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    year = random_movie.get("year", "–ì–æ–¥ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
    description = random_movie.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    rating = random_movie.get("rating", {}).get("kp", "–†–µ–π—Ç–∏–Ω–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    type_ = random_movie.get("type", "–¢–∏–ø –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
    poster_url = random_movie.get("poster", {}).get("url")

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–∏–ø —Ñ–∏–ª—å–º–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
    type_in_russian = type_translation.get(type_, type_)
    response_text = f"–†–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å: {name} ({year})\n–¢–∏–ø: {type_in_russian}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n–†–µ–π—Ç–∏–Ω–≥: {rating}"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å" –∏ "–ù–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å"
    markup = types.InlineKeyboardMarkup()
    like_button = types.InlineKeyboardButton("üëç –ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å", callback_data=f"like_{movie_id}")
    dislike_button = types.InlineKeyboardButton("üëé –ù–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å", callback_data=f"dislike_{movie_id}")
    markup.add(like_button, dislike_button)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    if poster_url:
        bot.send_photo(chat_id, poster_url, caption=response_text, reply_markup=markup)
    else:
        bot.send_message(chat_id, response_text, reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ "–ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å" –∏ "–ù–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å"
@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    user_id = call.from_user.id
    movie_id = int(call.data.split('_')[1])
    action = call.data.split('_')[0]

    if action == "like":
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å–º –≤ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è
        cursor.execute("REPLACE INTO user_preferences (user_id, movie_id, liked) VALUES (?, ?, ?)", (user_id, movie_id, 1))
        bot.answer_callback_query(call.id, "–§–∏–ª—å–º –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è!")
    elif action == "dislike":
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å–º –≤ –Ω–µ–ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è
        cursor.execute("REPLACE INTO user_preferences (user_id, movie_id, liked) VALUES (?, ?, ?)", (user_id, movie_id, 0))
        bot.answer_callback_query(call.id, "–§–∏–ª—å–º –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–µ–ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è.")
    conn.commit()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)